1. 什么是Web应用程序？

	Web应用程序是一种可以通过Web访问的应用程序。Web应用程序的一个最大好处是用户很容易访问应用程序。用户只需要浏览器并接入互联网即可，不需要再安装其他软件。

	举例：电子商务类网站比如淘宝，天猫；一些门户网站比如搜狐，网易；网上的一些在线营业厅等。

	Web应用程序，桌面应用程序和嵌入式应用程序(mobile端)，三者是目前软件开发领域的三大方向。

2. Java Web开发涉及到Java整个架构下的JavaEE方向 (Java的架构分为JavaSE, JavaEE和JavaME). 

3. 静态网页 V.S. 动态网页

	静态网页
		表现形式：网页中的内容是固定的，不会更新。

		所需技术：HTML，CSS

	动态网页
		表现形式：网页中的内容通过程序动态显示的，自动更新。比如：动态指的是能与用户进行交互，比如登录时输入正确的用户名和密码，系统会提示登录成功

		所需技术：HTML，CSS, 数据库database技术，至少一门高级语言(Java, C#, PHP), JavaScript, XML等。主流的动态网页脚本技术(JSP, ASP.NET, PHP). 注意：ASP.NET是微软的技术，PHP是Apache的技术。

4. Tomcat服务器是常见的WEB服务器，是一个Apache组织下的开源项目。它可以用于解析HTML,CSS, JavaScript这些前端语言，同时它也是
JSP/Servlet的容器。因此学习JSP开发，需要这样的一个容器，所以可以考虑用Tomcat服务器。   注意：容器这个概念。

5. 在Mac下，如何启动/关闭 Tomcat服务器？(安装说明见Evernote笔记)
	启动：/Library/Tomcat/bin/startup.sh
	关闭：/Library/Tomcat/bin/shutdown.sh

6. Tomcat服务器的目录结构

	/bin		存放各种平台下用于启动和停止Tomcat的命令文件, 存放的都是可执行文件,比如startup.sh和shutdown.sh
	/conf		存放Tomcat服务器的各种配置文件。比如：配置Tomcat的默认端口号等。
	/lib 		存放Tomcat服务器所需的各种jar文件。
	/logs		存放Tomcat的日志文件。
	/temp		Tomcat运行时用于存放临时文件。
	/webapps 	当发布Web应用时，默认会将Web应用的文件发布到于此目录中。（重要！）
	/work		Tomcat把由JSP生成的Servlet放于此目录下。

7. 手动编写第一个Web程序。
	(1) 在/Library/Tomcat/WebApps下创建新工程项目目录。
	(2) 在新工程目录下，编写index.jsp
	(3) 在新工程目录下，创建WEB-INF目录
	(4) 测试运行。

8. WEB-INF目录详解。(重要！！！)
	(1) WEB-INF目录是Java的WEB应用的安全目录，所谓安全目录就是客户端无法访问，只有服务器端可以访问的目录。
	(2) 该目录下的web.xml是项目部署文件。比如部署: 项目的欢迎界面，可以通过在web.xml中添加并更改相应标签来完成。举例如下：

		<welcome-file-list>
        	<welcome-file>index.html</welcome-file>
        	<welcome-file>index.xhtml</welcome-file>
        	<welcome-file>index.htm</welcome-file>
        	<welcome-file>index.jsp</welcome-file>
    	</welcome-file-list>

	(3) 该目录下的classes文件夹，存放编译后的byte code文件即 *.class文件。
	(4) 该目录下的lib文件夹，存放工程需要的jar包。比如一些连接数据库的驱动jar包。

9. 注意！！！！！！WEB-INF中的项目部署文件web.xml每次修改后，都要重新启动Tomcat服务器！！！！！很容易忽略！！！！

10. 如何修改Tomcat服务器的默认端口号？
	Tomcat服务器的默认端口号为 8080. 但实际中，我们电脑中会安装很多应用服务器和数据库服务器，因此有可能造成端口冲突。
在Tomcat服务器的目录下，conf/server.xml文件中，我们可以设置为比如 8888来修改默认端口号。

    <Connector port="8080" protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="8443" />

11. 什么是JSP?

	JSP全称 Java Server Pages(Java服务器页面),其根本是一个简化的Servlet设计，它是在传统网页HTML文件中，插入Java程序段，从而形成JSP文件。
JSP是一种动态网页技术标准。JSP与Servlet一样，是在服务器端执行的。用JSP开发的Web应用是跨平台的。

12. 常见的动态网站开发技术对比如下：
	
	JSP： 		Java平台，安全性高，适合开发大型企业级WEB应用程序。
	ASP.NET： 	.NET平台，简单易学，安全性以及跨平台性差。
	PHP：		简单高效，成本低开发周期短，特别适合中小型企业的WEB应用开发。(LAMP: Linus + Apache + MySQL + PHP)

13. JSP页面的组成部分包括： 静态内容，指令，表达式，小脚本，声明，注释。

14. JSP的指令，常用的有3个。三大指令！！

	page指令			通常位于JSP页面的顶端，同一个页面可以有多个page指令。
	include指令		将一个外部文件嵌入到当前JSP文件中，同时解析这个页面中的JSP语句。
	taglib指令		使用标签库定义新的自定义标签，在JSP页面中启用定制行为。


	page指令语法： <%@ page 属性1 = "属性值" 属性2 = "属性值1, 属性值2" ... 属性n = "属性值n"%>

		<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>

	    	属性 				描述									默认值
	    language		指定JSP页面使用的脚本语言						Java
	    import			通过该属性来引用脚本语言中使用到的类文件			无
	    contentType		指定JSP文件类型和页面的字符编码					text/html, ISO-8859-1


15. JSP的注释

		HTML的注释：		<!-- html注释 -->  这种注释，客户端可见，也即客户端view page source是可以看到的。
		JSP的注释： 		<%-- html注释 --%>  客户端不可见。
		JSP的脚本注释：	//  /* */          也即Java的注释， 比如 <%       //           %>

16. 















