1. 什么是Web应用程序？

	Web应用程序是一种可以通过Web访问的应用程序。Web应用程序的一个最大好处是用户很容易访问应用程序。用户只需要浏览器并接入互联网即可，不需要再安装其他软件。

	举例：电子商务类网站比如淘宝，天猫；一些门户网站比如搜狐，网易；网上的一些在线营业厅等；企业内部系统；搜索引擎等。

	Web应用程序，桌面应用程序和嵌入式应用程序(mobile端)，三者是目前软件开发领域的三大方向。




2. Java Web开发涉及到Java整个架构下的JavaEE方向 (Java的架构分为JavaSE, JavaEE和JavaME). 





3. 静态网页 V.S. 动态网页

	静态网页
		表现形式：网页中的内容是固定的，不会更新。

		所需技术：HTML，CSS

	动态网页
		表现形式：网页中的内容通过程序动态显示的，自动更新。比如：动态指的是能与用户进行交互，比如登录时输入正确的用户名和密码，系统会提示登录成功

		所需技术：HTML，CSS, 数据库database技术，至少一门高级语言(Java, C#, PHP), JavaScript, XML等。主流的动态网页脚本技术(JSP, ASP.NET, PHP). 注意：ASP.NET是微软的技术，PHP是Apache的技术。






4. Tomcat服务器是常见的WEB应用服务器，是一个Apache组织下的开源项目。它可以用于解析HTML,CSS, 这些标签语言，同时它也是
JSP/Servlet的容器。因此学习JSP开发，需要这样的一个容器，所以可以考虑用Tomcat服务器。   注意：容器这个概念。
Tomcat容器等级分为4个等级：Engine, Host, Context和Wrapper, 具体可以看Servlet笔记。

注意：还有一个常见的 企业级WEB应用服务器 JBoss





5. 在Mac下，如何启动/关闭 Tomcat服务器？(安装说明见Evernote笔记，注意下面的启动和关闭方式是输入的完整path, 因为并没有配置环境变量)
	启动：/Library/Tomcat/bin/startup.sh
	关闭：/Library/Tomcat/bin/shutdown.sh

	环境变量配置：  CATALINA_PATH = Tomcat的路径
				 JAVA_HOME = Java路径 
	             将Tomcat的bin路径加到环境变量PATH中



6. Tomcat服务器的目录结构 (注意：是Tomcat Server的目录结构，不是某一个WEB项目的目录结构)

	/bin		存放各种平台下用于启动和停止Tomcat的命令文件, 存放的都是可执行文件,比如startup.sh和shutdown.sh
	/conf		存放Tomcat服务器的各种配置文件。比如：server.xml文件配置Tomcat的默认端口号等。
	/lib 		存放Tomcat服务器所需的各种jar文件。
	/logs		存放Tomcat的日志文件。
	/temp		Tomcat运行时用于存放临时文件。
	/webapps 	当发布Web应用时，默认会将Web应用的文件发布到于此目录中，相当于存放一个个web工程。（重要！）
	/work		Tomcat把由JSP生成的Servlet文件，以及对其编译后生成的字节码文件存储在这里。
                
                注意：由于IDE的帮助比如Spring STS, 它IDE内部是可以构建virutal Tomcat来作为Server, 除了这种情况意外，只要在正常的
                     Tomcat目录中构建了WEB项目，且其中涉及到JSP文件，那么JSP引擎就会将其转化成Servlet，然后对其编译并生成字节码文件，
                     此时这些文件就保存在/work中！！




         

7. 手动编写第一个Web程序。注意一个WEB应用的目录结构。
	(1) 在/Library/Tomcat/WebApps下创建新工程项目目录。
	(2) 在新工程目录下，编写index.jsp
	(3) 在新工程目录下，创建WEB-INF目录, 其中WEB-INF目录下还需要创建：web.xml即工程项目部署文件，classes文件夹，lib文件夹。
	(4) 测试运行。




8. WEB-INF目录结构详解。(重要！！！)
	(1) WEB-INF目录是Java的WEB应用的安全目录，所谓安全目录就是客户端无法访问，只有服务器端可以访问的目录。
	
	------------------------------------------------------------------------------------------------------------------
	注意：如何证明WEB-INF目录是安全目录也就是说用户是不可见的。首先要在Tomcat的conf目录下的web.xml配置文件中有下面的内容：
	
	<servlet>
        <servlet-name>default</servlet-name>
        <servlet-class>org.apache.catalina.servlets.DefaultServlet</servlet-class>
        <init-param>
            <param-name>debug</param-name>
            <param-value>0</param-value>
        </init-param>
        <init-param>
            <param-name>listings</param-name>
            <param-value>false</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>

    注意：listings那里的false改成true后，我们就可以看到每个web应用下的所有目录和文件信息了，但会发现看不到WEB-INF目录。同时要注意，在开发的
         过程中，这里可以设置为true, 方便我们浏览具体信息，显示目录。正式项目发布时，绝对不能设置为true, 否则信息就暴露给用户了！！！
	------------------------------------------------------------------------------------------------------------------


	(2) 该目录下的web.xml是项目部署文件。比如部署: 注册Servlet, 或者项目的欢迎界面，可以通过在web.xml中添加并更改相应标签来完成。举例如下：

		<welcome-file-list>
        	<welcome-file>index.html</welcome-file>
        	<welcome-file>index.xhtml</welcome-file>
        	<welcome-file>index.htm</welcome-file>
        	<welcome-file>index.jsp</welcome-file>
    	</welcome-file-list>

	(3) 该目录下的classes文件夹，存放编译后的byte code文件即 *.class文件。注意：与/work目录下的文件的区别？？！！
	(4) 该目录下的lib文件夹，存放工程需要的jar包。比如一些连接数据库的驱动jar包。







9. 注意！！！！！！WEB-INF中的项目部署文件web.xml每次修改后，都要重新启动Tomcat服务器！！！！！很容易忽略！！！！





10. 如何修改Tomcat服务器的默认端口号？
	Tomcat服务器的默认端口号为 8080. 但实际中，我们电脑中会安装很多应用服务器和数据库服务器，因此有可能造成端口冲突。
在Tomcat服务器的目录下，conf/server.xml文件中，我们可以设置为比如： 8888 来修改默认端口号。URIEncoding表示访问的字符编码

    <Connector port="8080" protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="8443" 
               URIEncoding = "UTF-8"
               />



http://localhost:8080/MyThirdJSP/login.jsp
http://192.168.1.100:8080/MyThirdJSP/login.jsp

	 如果不希望在请求页面时的URL中输入:8080端口号，那么可以考虑使用默认的端口号也就是80, 但仍然需要注意80端口是否被占用！！！！




	基于虚拟路径的WEB项目发布 (WEB工程可以不放在Tomcat的webapps目录中)
	----------------------
	比如我们的WEB项目并没有直接创建在Tomcat webapps目录下，而是创建在别的地方。我们可以通过虚拟路径的方式来发布WEB项目。只需要配置一个上下文
context信息。在Tomcat的conf目录的server.xml中可以找到一个<host>标签，加入以下信息：
	
	<context path="/world" docBase=""/>
	首先path表示的就是这个WEB项目的虚拟路径，这样配置表示以后我们可以通过 localhost:8080/world 来访问这个WEB项目。docBase表示的就是这个
WEB项目的实际位置也即绝对路径，注意这个绝对路径一定要进入到这个WEB项目中的path
	
	注意：这里可以回想Tomcat容器等级中的Context等级的概念。找一些相关性。



11. 什么是JSP?

	JSP全称 Java Server Pages(Java服务器页面),其根本是一个简化的Servlet设计，它是在传统网页HTML文件中，插入Java程序段，从而形成JSP文件。
JSP是一种动态网页技术标准。JSP与Servlet一样，是在服务器端执行的。用JSP开发的Web应用是跨平台的。在JSP的生命周期中，会伴随着JSP转化到Servlet
的过程(由JSP引擎将JSP转化成Servlet即java类文件.java, 然后编译成字节码文件.class, 这些文件放在Tomcat的/work目录内)。
   注意：是先有Servlet再有的JSP.





12. 常见的动态网站开发技术对比如下：
	
	JSP： 		Java平台，安全性高，适合开发大型企业级WEB应用程序。还有如今流行的分布式计算框架，Hadoop也是基于Java的。
	ASP.NET： 	.NET平台，简单易学，安全性以及跨平台性差。
	PHP：		简单高效，成本低开发周期短，特别适合中小型企业的WEB应用开发。(LAMP: Linux + Apache + MySQL + PHP)




13. JSP页面的组成部分包括： 静态内容(html)，指令，表达式，小脚本，声明，注释。




14. JSP的指令，常用的有3个。三大指令！！

	page指令			通常位于JSP页面的顶端，同一个页面可以有多个page指令。
	include指令		将一个外部文件嵌入到当前JSP文件中，同时解析这个页面中的JSP语句。
	taglib指令		使用标签库定义新的自定义标签，在JSP页面中启用定制行为。


	page指令语法： <%@ page 属性1 = "属性值" 属性2 = "属性值1, 属性值2" ... 属性n = "属性值n"%>

		<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>

	    	属性 				描述																	默认值
	    language		指定JSP页面使用的脚本语言														Java
	    import			通过该属性来引用脚本语言中使用到的类文件 (重要！！！！)	 							无
	    contentType		指定JSP文件类型和页面的字符编码(指服务器发给客户端时的内容编码)					text/html, UTF-8
		pageEncoding	是JSP文件本身的编码 (contentType更常用)





15. JSP的注释

		HTML的注释：		<!-- 注释html标签 -->  这种注释，客户端可见，也即客户端view page source是可以看到的。
		JSP的注释： 		<%-- 注释html标签或jsp标签 --%>  客户端不可见。可以用来注释JSP脚本。
		JSP脚本内的注释：	//  /* */          也即脚本中Java的注释，客户端不可见。 比如 <%       //           %>




16. JSP的脚本
	
	在JSP页面中执行的JAVA代码。把java代码写在JSP标签之间。语法： <% Java代码 %>
	比如：<% out.println("Hello World!"); %>, 其中out是一个JSP内置的用于浏览器输出的对象。

	注意：
	JSP脚本<% expression %>内的代码会生成为目标Servlet类的jspService()方法中的代码片段，因此其作用域只作用于当前JSP页面中该脚本段的后面。

	注意：<% %>一定要成对儿编程，否则代码可读性很不好容易搞混！！
	注意：因为写在jsp脚本中的代码都会转化成代码片段在Servlet类的jspService()方法中，因此不能再jsp脚本中定义函数！！！只能在jsp声明中定义
	     函数！！！



17. JSP的声明

	在JSP页面中定义变量或者方法。语法：<%!  Java代码   %>
	这里的Java代码是声明一些变量，或者定义方法，方便以后的JSP页面中的脚本去调用这些声明的变量或者定义的方法。

	注意：在JSP的声明中，不能访问JSP内置的9大对象！！！！

	JSP声明（<%!  expression  %>）内所定义的变量会生成为目标Servlet类的全局变量，作用域涵盖当前JSP页面及<%@include %>指令所包含进来的JSP文件，且使用不分先后顺序。重要！！！！可以测试一下，观察jsp被转化后的那个Servlet的java文件！！



18. JSP的表达式 (！！！！推荐用JSP的表达式来进行信息输出，而不要用内置out对象来输出到浏览器！！！！！)

	在JSP页面中执行的表达式,表达式可以是之前定义的一些变量或者定义的方法。语法：   <%= 表达式 %>  
	注意：表达式不以分号结束！！！不要弄混了！！
	注意：表达式的执行，会伴随着信息的输出！！

	<%! 
		String name = "张小哈";
		int add(int x, int y){
			return x+y;
		}
	%>
	你好，<%= name %> <br/>
	x+y= <%= add(10,2) %>

	........
	 <tr>
       <td>用户名：</td>
       <td><input type="text" name="username" value="<%= username%>"/></td>
     </tr>
     <tr>
       <td>密码：</td>
       <td><input type="password" name="password" value="<%=password %>" /></td>
     </tr>
	 ........






19. JSP页面的生命周期 (重点！！！！！)

	用户向服务器发出请求index.jsp, 服务器判断是否是第一次请求。如果是第一次请求，Tomcat的JSP引擎把该JSP文件转换成为一个Servlet
(Servlet本质上也是一个java类), 然后经过编译生成字节码文件，并执行jspInit()方法。如果不是第一次请求，则直接找到编译生成的字节码文件，
解析执行 jspService(). 所以jsp的页面在第一次运行时会相对比较慢，因为要完成JSP-Servlet的转换。
	
	注意：由JSP引擎，将JSP文件转换成Servlet后，并编译生成的对应的字节码文件，存放在 /work目录下，上面笔记中有提到。
	注意：jspInit()方法，一共只会执行一次。

	jspService()方法被调用来处理客户端的请求。对每一个请求，JSP引擎创建一个新的线程来处理该请求。如果有多个客户端同时请求该JSP文件，则JSP
引擎会创建多个线程。每个客户端请求对应一个线程。以多线程方式执行，可以大大降低对系统的资源需求，提高系统的并发量及减少了响应时间。但也要注意多线程
的编程带来的同步问题，由于该Servlet始终在内存，所以响应是非常快的。

	注意：在转换成Servlet并编译后，产生的字节码文件和.java文件中，可以看到jspInit()方法和jspService()方法！！
	注意：每当JSP文件发生改变时，当客户发生请求时(比如重新刷新页面)，JSP引擎就会重新将该JSP转化成Servlet,并编译生成新的字节码文件来解析执行。





20. JSP的内置对象是WEB容器创建的一组对象，不使用new关键字就可以创建使用的内置对象。比如：out就是一个内置对象。

	JSP有9大内置对象，其中常用的5个内置对象为：out, request, response, session, application; 剩下4个不常用的内置对象
为：page, pageContext, exception, config

	//-----------------------------------------------------------------------------------------//
	out(PrintWriter)
	out对象是jspWriter类的实例，是向客户输出内容常用的对象。常用方法如下：
	【1】void println(), 向客户端打印字符串，可以输出HTML标签，这样客户端浏览器收到响应时可以相应解析。
	【2】void clear(), 清除缓冲区的内容，如果在flush之后调用会抛出异常。
	【3】void clearBuffer(), 清除缓冲区内容，如果在flush之后调用不会抛出异常。
	【4】void flush(), 将缓冲区内容输出到客户端。
	【5】int getBufferSize(), 返回缓冲区以字节数的大小，如不设缓冲区则为0
	【6】int getRemaining(), 返回缓冲区还剩余多少可用。
	【7】boolean isAutoFlush(), 返回缓冲区满时，是自动清空还是抛出异常。
	【8】void close(), 关闭输出流。

	//-----------------------------------------------------------------------------------------//
	request(HttpServletRequest)
	客户端的请求信息被封装在request对象中，通过它才能了解到客户的需求，然后做出响应。它是HttpServletRequest类的实例。request对象具有请求
	域，即完成客户端的请求之前，该对象一直有效。常用方法如下：
	【1】String getParameter(String name), 表单中的<input>控件中,有一个属性是name,传递的就是这个name属性的值,得到对应value属性的值。
	【2】String[] getParameterValues(String name), 同上但此时属性name会对应有多个属性value, 比如<input>控件类型为checkbox
	【3】void setAttribute(String, Object), 在请求对象中，存储属性。属性是键值对。
	【4】Object getAttribute(String name), 返回指定属性的属性值。
	【5】String getContentType(), 得到请求体的MIME类型。
	【6】String getProtocol(), 返回请求用的协议类型及版本号。
	【7】String getServerName(), 返回接受请求的服务器主机名。
	【8】int getServerPort(), 返回服务器接受此请求所用的端口号。
	【9】String getCharacterEncoding(), 返回字符编码方式。
	【10】void setCharacterEncoding(), 设置请求的字符编码方式。
	【11】int getContentLength(), 返回请求体的长度(以字节数)
	【12】String getRemoteAddr(), 返回发送此请求的客户端IP地址。
	【13】String getRealPath(), 返回一虚拟路径的真实路径。
	【14】String request.getContextPath(), 返回上下文路径。

	注意：getParameter()等一些方法，不仅针对post方式表单提交信息封装与request对象中的信息获取，也可以对URL传递参数进行信息获取。

	注意：对应request对象中若包含中文信息，由于表单提交的信息默认编码为ISO-8859XX,因此我们要重新set编码方式，可以通过
	     request.setCharacterEncoding("utf-8");来解决中文乱码问题。但是无法解决URL传递中文参数出现的乱码问题,但其实也有解决办法，可以
	     通过配置server.xml文件来解决如下，加上一个属性 URIEncoding="utf-8". (记得要重启Tomcat来测试！！)
	     <Connector port="8080" protocol="HTTP/1.1"
                    connectionTimeout="20000"
                    redirectPort="8443" URIEncoding="utf-8"/>


	ref: http://www.w3school.com.cn/tags/tag_input.asp
		 http://www.w3school.com.cn/tiy/t.asp?f=html_checkboxes



	注意：getParameter()和getParameterValues()的区别！！！比如下面这种复选框类型的input空间，name属性值都相同，但对应的value属性的值
不同，因此我们需要用 request.getParameterValues("vehicle")来得到所有可能的value属性的值即  ["Bike", "Car"] .

	<input type="checkbox" name="vehicle" value="Bike" /> I have a bike
	<input type="checkbox" name="vehicle" value="Car" /> I have a car



	//-----------------------------------------------------------------------------------------//

	response(HttpServletResponse)
	response对象包含了响应客户请求的有关信息，但在JSP中很少直接用到它。它是HttpServletResponse类的实例。response对象具有页面的作用域，即
	访问一个页面时，该页面内的response对象只能对这次访问有效，其他页面的response对象对当前页面无效。

	【1】String getCharacterEncoding(), 返回响应用的是何种字符编码。
	【2】void setContentType(String type), 设置响应的MIME类型。一般写在最前面。
	【3】PrintWriter getWriter(), 返回可以向客户端输出字符的一个对象。(注意比较：PrintWriter与内置out对象的区别)
	【4】sendRedirect(String location), 重新定向客户端的请求。

	注意：PrintWriter的使用，需要导入java.io.*, 也就是在page指令中，import属性也即 import = "java.util.*, java.io.*"
	注意：PrintWriter类型的对象的输出，总是提前于内置out对象的输出。如果想让out对象的输出提前，可以强制flush缓冲区，这样就会直接输出。利用
	     out.flush()方法。

	//-----------------------------------------------------------------------------------------//

	session(HttpSession)
	【1】long getCreationTime(), 返回session创建时间, 单位为ms毫秒。
	【2】String getId(); 返回session创建时JSP引擎为它设的唯一ID号。
	【3】Object setAttribute(String name, Object value), 按照键值对，给session对象中设置一个属性。
	【4】Object getAttribute(String name), 返回指定名称的属性，没有则返回null
	【5】String[] getValueNames(), 返回一个包含此session中所有可用属性的数组。
	【6】int getMaxInactiveInterval(), 返回两次请求间隔多长时间此session被取消(单位秒)
	【7】setMaxInactiveInterval(), 设置当前session最大生存期限，单位为秒。


	application(ServletContext)
	//-----------------------------------------------------------------------------------------//

	【1】String getRealPath(), 返回当前WEB项目的实际绝对路径。
	【2】



21. Web程序的请求响应模式：即用户发送HTTP请求(request), 服务器给用户响应(response).

	举例：比如一个用户的登录请求，点击登录即在向服务器发送请求，在请求对象中封装了用户名和密码。当服务器端接收到用户的请求后，判断用户名和密码后
，给客户端发送响应页面。






22. 什么是缓冲区？

	缓冲区又叫buffer, 是内存的一块儿区域用来保存临时数据。当我们调用 out.println()用于向客户端输出内容时，我们在客户端浏览器是可以看见这些
内容的，同时这些内容实际上也在内存上的缓冲区存着。换句话说，每当我们输出时，输出的内容是先到缓冲区缓存到一定字节数时，作为一个包转发出去的。这样
按包发送要比一个字节一个字节的发送，效率高！








23. 表单常用的提交方式get与post区别

	<form name = "regForm" action = "动作" method = "提交方式">
	</form>

	get
	以明文的方式，通过URL提交数据，数据在URL中可以看到。提交的数据最多不超过2KB。安全性较低，但效率比post方式高。适合提交数据量不大，安全性不高的数据。比如：搜索、查询等功能。超级链接<a href=""></a>也是一种get请求方法。

	post
	将用户提交的信息封装在HTML HEADER内。适合提交数据量大，安全性高的用户信息。比如：注册、修改、上传等功能。因此，如何获得post方式提交的表单
	信息，就要通过其他的内置对象来完成了。







24. 请求转发与请求重定向的区别。(重要！！！)

	请求重定向：客户端行为，response.sendRedirect(), 从本质上讲等同于两次请求，前一次的请求对象不会保存，地址栏的URL地址会改变。
	举例：假设去A局办理护照，A局的人说：这个事儿不归我们管，去B局，然后从A局出来，自己乘车再去B局。

	请求转发：服务器端行为，request.getRequestDispatcher("转发地址").forward(request, response);是一次请求，转发后请求对象会保存，
	        地址栏URL不变
	举例：你去了A局， A局看了以后，知道这个事情其实应该B局来管，但是他没有把你退回来，而是让你坐一会儿，自己到后面办公室联系了B的人，让他们办好
	     送过来。


25. 什么是session?

	session表示客户端与服务器的一次会话；WEB中的session指的是用户在浏览某个网站时，从进入网站到浏览器关闭所经过的这段时间，也就是用户浏览这个
网站所花费的时间。从上述定义中可以看到，session实际上是一个特定的时间概念。
	在服务器的内存中，保存着不同用户的session.
	session会话，是用来保存用户状态的一种机制。

	举例购物流程，整个购物过程属于一次会话。
	用户登录 -> 放入购物车 -> 订单填写 -> 提交订单 -> 订单确认 -> 立即付款


26. session对象
	· session对象是一个JSP的内置对象。
	· session对象是在第一个JSP页面被加载时自动创建，完成会话期管理。
	· 从一个客户打开浏览器并连接到服务器开始，到客户关闭浏览器，离开这个服务器结束，被称为一个会话。
	· 当一个客户访问一个服务器时，可能会在服务器的几个页面之间切换，服务器应当通过某种办法知道这是同一个客户，就需要session对象。
	· session对象是HttpSession类的实例。
	· 只有把相关会话的所有页面都关闭后，才算这个session的结束。




27. 什么是JavaBeans？

	符合某种特定规范的Java类, 是Java中一种特殊的类。使用JavaBeans的好处是解决代码重复编写，减少代码冗余，功能区分明确，提高了代码的维护性。

	JavaBeans符合某种特定规范，也可以理解为是JavaBeans的设计原则。
	原则一：公有类
	原则二：无参的公有构造方法
	原则三：属性私有
	原则四：setter和getteer方法

	！！重要 ！！！JavaBeans既可以封装数据，也可以封装业务逻辑功能。


28. 什么是JSP动作？

	JSP动作元素 (action elements), 动作元素为 请求处理阶段 提供信息。动作元素遵循XML语法，有一个包含元素名的开始标签，可以有属性、
可选的内容、与开始标签匹配的结束标签。JSP动作元素包括5大类：

	第一类是与存取JavaBeans有关的，包括：
	<jsp:useBean>		<jsp:setProperty>		<jsp:getProperty>

	第二类是JSP1.2就开始有的基本动作元素，包括：
	<jsp:include>	<jsp:forward>	<jsp:param>		<jsp:plugin>	<jsp:params>	<jsp:fallback>

	第三类是JSP2.0开始新增加的动作元素，包括：
	<jsp:root>		<jsp:declaration>	<jsp:scriptlet>		<jsp:expression>	<jsp:text>		<jsp:output>

	第四类也是新增的动作元素，主要用来动态生成XML元素标签的值，包括：
	<jsp:attribute>		<jsp:body>		<jsp:element>

	第五类也是新增的动作元素，主要用于Tag File中，包括：
	<jsp:invoke>	<jsp:dobody>



29. 如何在JSP页面中使用JavaBeans? 

	方式1：像使用普通java类一样，创建JavaBeans实例。首先在工程src源文件目录中，创建一个符合JavaBeans设计规范的Java类。然后在JSP中，首先
要在页面顶端，通过page指令的import属性，将该类导入进来。<%@ page import = "packageName.className" %>  然后通过在JSP页面中，插入JSP
脚本，通过new关键字生成JavaBeans实例，并且定义一些方法，之后就可以通过JSP的表达式来获得信息了。
	注意：JavaBeans一般都是在JSP页面中进行使用。


	方式2：在JSP页面中，使用jsp动作元素(action elements)来使用JavaBeans. 如同上一条笔记中的第一类与JavaBeans有关的3个动作元素。
	<jsp:useBean> 在JSP页面中实例化或者在指定范围内使用JavaBeans.
	<jsp:useBean id="标示符" class="java完整类名" scope="作用范围" />

	e.g.： 
	<jsp:useBean id = "myUsers" class = "packageName.Users" scope = "page" />

	注意：上面jsp动作元素使用后，我们就可以得到一个JavaBeans实例化对象，也就是id属性的值即：myUsers, 但如果此时输出该JavaBeans对象的
属性值是并没有什么结果，因为我们并没有对该对象进行setter操作！！所以接下来研究<jsp:setProperty>这个动作元素。


30. <jsp:setProperty>
	给已经实例化的JavaBeans对象的属性赋值，一共四种形式。

	<jsp:setProperty name = "JavaBeans实例名" property = "*" /> (跟表单关联)
	注意：*表示，表单提交过来时name属性的名字值与JavaBeans中的私有属性进行一一匹配，如果匹配上，就会调用JavaBeans中的setter方法，自动将
表单中的value属性对应的值，set过去。"JavaBeans实例名"就是上面id属性的值。


	<jsp:setProperty name = "JavaBeans实例名" property = "JavaBeans属性名" /> (跟表单关联)
	只匹配表单中的部分name属性对应的JavaBeans私有属性，完成部分setter方法。


	<jsp:setProperty name = "JavaBeans实例名" property = "JavaBeans属性名" value = "BeanValue" /> (手工设置)
	与表单无关，人为对JavaBeans实例的私有属性，进行赋值。


	<jsp:setProperty name = "JavaBeans实例名" property = "propertyName" param = "request对象中的参数名" /> (跟request参数关联)
	param是通过URL地址传参的方式传递的，参数不一定是表单中的参数，可是通过URL地址栏来传递的参数。

	/**********************************************************************************/
    <form name="loginForm" action="dologin.jsp?mypass=999999" method="post">
      <table>
        <tr>
          <td>用户名：</td>
          <td><input type="text" name="username" value=""/></td>
        </tr>
        <tr>
          <td>密码：</td>
          <td><input type="password" name="password" value=""/></td>
        </tr>
        <tr>
          <td colspan="2" align="center"><input type="submit" value="登录"/></td>
          
        </tr>
      </table>
    </form>


    <jsp:setProperty name="myUsers" property="password" param="mypass"/>
    /**********************************************************************************/




31. <jsp:getProperty>
	作用：获取指定JavaBeans对象的私有属性的值。
	<jsp:getProperty name = "JavaBeans实例名" property = "JavaBeans属性名" />

	/**********************************************************************************/
	<jsp:useBean id="myUsers" class="com.po.Users" scope="page"/>

	<!-- 使用传统的表达式方式来获取用户名和密码 -->
    <%--     
       用户名：<%=myUsers.getUsername() %><br>
       密码：<%=myUsers.getPassword() %><br> 
    --%>
    <!-- 使用getProperty方式来获取用户名和密码 -->
      用户名：<jsp:getProperty name="myUsers" property="username"/> <br>
      密码：<jsp:getProperty name="myUsers" property="password"/><br>

	/**********************************************************************************/




32. JavaBeans的四个作用域范围。

	<jsp:useBean id="标示符" class="java完整类名" scope="作用范围" />, scope属性可以用来指定JavaBeans的作用范文。

	· page // 可以通过pageContext.getAttribute("")方法获取JavaBeans对象，仅在当前页面有效, 范围最小。
	· request // 可以通过request.getAttribute("")方法取得JavaBeans对象, 在同一个request中有效。
	· sesion // 可以通过 session.getAttribute("")方法取得JavaBeans对象, 在同一次session中有效。
	· application // 可以通过application.getAttribute("")方法取得JavaBeans对象, 范围最大，全局有效。


	注意：换句话说，我们可以通过动作元素获取到JavaBeans对象，也可以通过JSP的内置对象，获取到JavaBeans对象，注意scope的作用！
	注意：如果是scope是request的话，如果使用的是 请求重定向 来测试的话，那么在新的页面内是获取不到JavaBeans对象的，因为相当于是一个新的请求
	     所以需要使用服务器内部 请求转发 request.getRequestDispatcher("转发地址").forward(request, response); 可以测试成功。






33. HTTP协议的无状态性

	超文本传输协议HTTP是无状态性的。无状态是指，当浏览器发送请求给服务器时，服务器响应客户端请求。但是当同一个浏览器再次发送请求给服务器时，
服务器并不知道这个第二次的请求就是刚刚那个客户端。因此，它没有办法去保存用户的状态。






34. 保存用户状态的两大机制 Session 和 Cookie

	Session, 通过JSP的内置对象session来实现。





35. Cookie (注意：潜在安全问题是容易泄露用户信息！！！！！一般都是经过加密的Cookie)
	Cookie, 是Web服务器保存在客户端的一系列文本信息。作用如下：
	
	· 对特定对象的追踪
	· 保存用户网页浏览记录与习惯, 保存用户状态。
	· 简化登录


	典型应用一：判定注册用户是否已经登录过网站。

	典型应用二："购物车"的处理，比如用户会在一段时间内访问同一家网站，在不同的页面中选择不同的商品，因此可以用cookie来保存用户的这些信息以便
	          最后结账时，把这些信息一并提取出来，相当于利用cookie保存了用户浏览商品的记录。

	典型应用三：比如一些在线视频网站，会记录用户已经浏览过的视频。比如在搜索栏里显示了你之前搜索过的内容。

	典型应用四：记住用户名和密码，实现自动登录功能。


	注意：当浏览器第一次请求某个JSP页面时，此时的请求包中是没有Cookie的此时Cookie是不存在的，然后发生第一次请求--响应，在响应时服务器会写入
Cookie在响应包中，然后浏览器解析数据显示对应的页面，然后Cookie就也同时保存在客户端了！然后当客户端再有请求时，就会将Cookie一同发送给服务器端，
然后服务器端就可以根据Cookie来做相应的处理。

	注意：如果服务器端set的Cookie的生存期限很长的话，那么即使当我们把浏览器关闭后，再打开再次请求时，Cookie仍然存在，会由客户端浏览器将其封装
在request header中，请求到服务器端！！

	
	************ request header ***************** (第一次请求)

	GET /MySecondJSP/index.jsp HTTP/1.1
	Host: localhost:8080
	User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:37.0) Gecko/20100101 Firefox/37.0
	Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
	Accept-Language: en-US,en;q=0.5
	Accept-Encoding: gzip, deflate
	Connection: keep-alive


	************ response header *****************  (第一次响应)

	HTTP/1.1 200 OK
	Server: Apache-Coyote/1.1
	Set-Cookie: JSESSIONID=847E281F37C3718D36F158297A8A8651; Path=/MySecondJSP/; HttpOnly
	Content-Type: text/html;charset=UTF-8
	Content-Length: 487
	Date: Fri, 05 Feb 2016 08:31:50 GMT



	注意：上面的response header中，服务器端set了一个cookie发送到客户端来。实际上当我们打开浏览器第一次请求一个页面时，其实这就是意味着
一个会话session开始了，所以我们可以通过firefox看到服务器传回来的response header中有JSESSIONID = XXXXX这样的Cookie存在，注意该Cookie
的expire-date是HttpOnly, 说明这个cookie的生存期限只存活于客户端和服务器的session会话中，所以一旦关闭浏览器session结束，这个cookie也就
自然expire销毁了。






36. JSP页面中创建与使用Cookie

	创建Cookie对象
	Cookie newCookie = new Cookie(String key, Object value);

	写入Cookie对象
	response.addCookie(newCookie);

	读取Cookie对象
	Cookie[] cookies = request.getCookies();


	与Cookie有关的常用方法
	----------------------------------------------------------------
	void setMaxAge(int expiry)         设置Cookie的有效期，以秒为单位
	void setValue(String value)        在Cookie创建后，对Cookie进行赋值
	String getName()                   获取Cookie名称
	String getValue()                  获取Cookie的值
	int getMaxAge()                    获取Cookie的有效时间，以秒为单位




37.  实现记忆用户名和密码的功能。(利用Cookie)

	当用户点击了一个checkbox也即"十天内记住我的登录状态”,然后输入了用户名和密码，第一次登录成功。当用户下次再次打开这个页面后，用户名和密码仍然出现在页面中。

	login.jsp是用户的一个登录界面。其中包括一个表单，等待用户输入用户名和密码。表单提交，请求dologin.jsp页面。
	dologin.jsp, 是一个用于处理登录请求的JSP文件。在这个页面中要保存Cookie信息，同时还链接到一个users.jsp文件。
	users.jsp, 是一个用于查看用户信息的界面。

	在dologin.jsp中，我们要通过jsp脚本先来判断用户是否有点击checkbox, 如果有点击checkbox说明用户希望记忆用户名和密码，那么我们可以创建
Cookie来记录用户名和密码。创建完后，我们要将Cookie对象，写入response对象，这样客户端浏览器才能保存这个Cookie信息。如果下一次，客户不想记录用户名和密码，那么我们则要让已有的Cookie失效才行，可以通过设置生存时间为0， 再重新response.add来设置失效。

	/******************************************************************************************/
		// 首先判断是否选择了记住登录状态。
		String isUseCookie = request.getParameter("isUseCookie");
		if( isUseCookie != null && isUseCookie.length() != 0 ){
			// 把用户名和密码保存在Cookie对象里
			String username = request.getParameter("username");
			String password = request.getParameter("password");
			
			Cookie usernameCookie = new Cookie("username", username);
			Cookie passwordCookie = new Cookie("password", password);
			
			usernameCookie.setMaxAge(864000); // 设置用户名Cookie最大生存时间为10天
			response.addCookie(usernameCookie);
			response.addCookie(passwordCookie);
		}else{
			Cookie[] cookies = request.getCookies();
			if( cookies!=null && cookies.length != 0 ){
				for(Cookie c: cookies){
					if( c.getName().equals("username") || c.getName().equals("password") ){
						c.setMaxAge(0); // 设置失效
						response.addCookie(c); // 重新保存Cookie, 别忘了！！！！
					}
				}
			}
		}
    /******************************************************************************************/


    接下来我们还要在登录界面login.jsp中判断如果用户上次选中过checkbox, 那么在登录界面上要显示上次登录成功的用户名和密码。换句话说，在登录界面
中，我们也要判断是否存在Cookie，因为如果之前选中过checkbox就意味着，我们之前设置过了Cookie, 那么再次请求login.jsp页面时，就应该能够得到之前
设置的Cookie, 所以login.jsp如下：

	/******************************************************************************************/


			<%
			String username = "";
			String password = "";
			Cookie[] cookies = request.getCookies();
			if( cookies!=null && cookies.length != 0 ){
				for(Cookie c: cookies){
					if( c.getName().equals("username") ){
						username = c.getValue();
					}
					if( c.getName().equals("password") ){
						password = c.getValue();
					}
				}
			}
			%>

		 ........
		 <tr>
           <td>用户名：</td>
           <td><input type="text" name="username" value="<%= username%>"/></td>
         </tr>
         <tr>
           <td>密码：</td>
           <td><input type="password" name="password" value="<%=password %>" /></td>
         </tr>
		 ........


	/******************************************************************************************/

	注意：如果用户名输入的是中文的话，那么就会有系统内部error, 是因为涉及到字符编码解码的问题。解决方法如下：
	【1】导入一个java package, import="java.util.*,java.net.*"
	【2】因为我们的用户名是作为请求header发送到服务器端来的，因此要设置request对象的字符集编码
	    request.setCharacterEncoding("utf-8");同时要对具体的用户名进行编码
	    String username = URLEncoder.encode(request.getParameter("username"),"utf-8");
	【3】解码的时候，也要先设置request对象的字符集编码，再对具体的用户名进行解码
		username = URLDecoder.decode(c.getValue(),"utf-8");





38. Session与Cookie的对比

		session                                             cookie
		----------------------------------------------------------------------------------------- 
	【1】在服务器端保存用户信息 (服务器内存)                   在客户端保存用户信息, 文本文件形式 (最初由服务器端创建和set)
    【2】session中保存的是Object类型                        cookie保存的是String类型
    【3】随会话结束而将其存储的数据销毁                        cookie可以长期保存在客户端 (根据生存时间而定)
    【4】保存重要的信息                                     保存不重要的用户信息
    【5】安全性高                                          安全性低

    注意：Cookie中对保存的对象的大小是有限制的。





39. 重新理解JSP页面生命周期 以及 JSP脚本


	/*************************************** index.jsp 代码段 ********************************************/
          <!-- 商品循环开始 -->
           <% 
               ItemsDAO itemsDao = new ItemsDAO(); 
               ArrayList<Items> list = itemsDao.getAllItems();
               if(list!=null&&list.size()>0)
               {
	               for(int i=0;i<list.size();i++)
	               {
	                  Items item = list.get(i);
           %>   
          <div>
             <dl>
               <dt>
                 <a href="details.jsp?id=<%=item.getId()%>"><img src="images/<%=item.getPicture()%>" width="120" height="90" border="1"/></a>
               </dt>
               <dd class="dd_name"><%=item.getName() %></dd> 
               <dd class="dd_city">产地:<%=item.getCity() %>&nbsp;&nbsp;价格:￥ <%=item.getPrice() %></dd> 
             </dl>
          </div>
          <!-- 商品循环结束 -->
        
          <%
                   }
              } 
          %>


    /*************************************** index.jsp 代码段 ********************************************/


    初次见上面的代码，可能会很不习惯，比如最初的JSP脚本里插入的java代码段并不是完整的，连closing括号都没。以及对应的最后的JSP脚本插入的
括号部分。
	分析如下：首先上面这种代码的风格是允许的，并不会报错，是因为我们回想一下JSP页面的生命周期，涉及到一个过程那就是JSP页面会由Tomcat的
JSP引擎将其转化为一个对应的Servlet类，并编译成字节码文件。因此对于JSP脚本中的Java代码，基本上会对应到Servlet中的Java代码，而对于HTML的内容
会通过一个输出对象out.write("html内容")进行输出。因此，上面这个代码段整理就是被转化成一个循环处理的Servlet类，因此可以循环的输出一个一个
商品Item.





40. 虚拟主机 Virtual Host的概念 (一台服务发布多个WEB应用)

	在Tomcal服务器的conf目录中的server.xml配置文件中，可以看到如下的内容。这相当于就是配置了一个主机host, 所以我们可以通过名称localhost来
访问我们Tomcat服务器上的资源。我们知道在一个服务器上，是可以有多个主机或者说可以运行多个网站或者WEB服务。因此，我们可以通过在server.xml中，创
建多个host来得到多个主机。

	这种让多个主机名称host name, 在一个单一服务器上运作，而且可以分开支持每个单一的主机名称的技术叫做虚拟主机virtual host.


	//-------------------------------------------------------------------------//
	<Host name="localhost"  appBase="webapps"
            unpackWARs="true" autoDeploy="true">
        <Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs"
               prefix="localhost_access_log" suffix=".txt"
               pattern="%h %l %u %t &quot;%r&quot; %s %b" />
    </Host>
	//-------------------------------------------------------------------------//


	注意：创建完一个新的host后，还是不能够直接访问的，也就是在URL地址栏中重新输入新的资源URI，换成新的host名字仍然是找不到的！！！找不到的原因
是因为，它找不到我们的主机！！！换句话说，一台服务器有一个IP地址，要想这台服务器能够运行多个主机，一方面是要重新创建host信息，另一方面我们需要将
新的host名称也映射到这个IP地址上，只有这样才能通过新的host name来找到我们的主机。

	在/etc目录下有一个hosts文件，里面记录了这些信息。






41. 如何能够不在URL地址栏中输入类似  /  这样的上下文路径或地址？
	
	可以考虑在Tomcat的conf目录中的server.xml配置文件中，找到对应的<Host>然后配置上下文虚拟路径<context>中的path为空，然后可能还需要一些
其他的设置等。






42. Spring STS中的Virtual Tomcat虚拟Tomcat Server

	我们在IDE比如Spring STS中创建的WEB项目，它其实是发布在一个虚拟的Tomcat Server中，换句话说当我们在STS中启动了Server.运行了我们在
IDE中的WEB项目，但实际Tomcat目录下的那些WEB项目并不会启动！！！同时，我们可以通过application内置对象的getRealPath()方法，来得到Spring STS中的WEB项目所在的实际绝对地址路径。

	注意：如果通过Spring STS开发WEB项目，报错时比如报错了某一个行数。此时要去，该WEB项目的real path中去找/work目录下的被转化成Servlet的
java文件来帮助DEBUG！！！！！







43. JSP页面与java对象的交互！！！！

	首先java类都要定义在IDE的src目录下，然后jsp页面中需要使用到这些Java对象和方法时，首先要通过<%@ page %>即page指令中的import属性将
对应的java package中的class导入import进来，然后就可以在JSP页面中与这些对象进行交互！！！




44. 









	


















