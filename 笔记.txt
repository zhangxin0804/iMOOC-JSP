1. 什么是Web应用程序？

	Web应用程序是一种可以通过Web访问的应用程序。Web应用程序的一个最大好处是用户很容易访问应用程序。用户只需要浏览器并接入互联网即可，不需要再安装其他软件。

	举例：电子商务类网站比如淘宝，天猫；一些门户网站比如搜狐，网易；网上的一些在线营业厅等。

	Web应用程序，桌面应用程序和嵌入式应用程序(mobile端)，三者是目前软件开发领域的三大方向。

2. Java Web开发涉及到Java整个架构下的JavaEE方向 (Java的架构分为JavaSE, JavaEE和JavaME). 

3. 静态网页 V.S. 动态网页

	静态网页
		表现形式：网页中的内容是固定的，不会更新。

		所需技术：HTML，CSS

	动态网页
		表现形式：网页中的内容通过程序动态显示的，自动更新。比如：动态指的是能与用户进行交互，比如登录时输入正确的用户名和密码，系统会提示登录成功

		所需技术：HTML，CSS, 数据库database技术，至少一门高级语言(Java, C#, PHP), JavaScript, XML等。主流的动态网页脚本技术(JSP, ASP.NET, PHP). 注意：ASP.NET是微软的技术，PHP是Apache的技术。

4. Tomcat服务器是常见的WEB服务器，是一个Apache组织下的开源项目。它可以用于解析HTML,CSS, 这些标签语言，同时它也是
JSP/Servlet的容器。因此学习JSP开发，需要这样的一个容器，所以可以考虑用Tomcat服务器。   注意：容器这个概念。

5. 在Mac下，如何启动/关闭 Tomcat服务器？(安装说明见Evernote笔记)
	启动：/Library/Tomcat/bin/startup.sh
	关闭：/Library/Tomcat/bin/shutdown.sh

6. Tomcat服务器的目录结构

	/bin		存放各种平台下用于启动和停止Tomcat的命令文件, 存放的都是可执行文件,比如startup.sh和shutdown.sh
	/conf		存放Tomcat服务器的各种配置文件。比如：server.xml文件配置Tomcat的默认端口号等。
	/lib 		存放Tomcat服务器所需的各种jar文件。
	/logs		存放Tomcat的日志文件。
	/temp		Tomcat运行时用于存放临时文件。
	/webapps 	当发布Web应用时，默认会将Web应用的文件发布到于此目录中。（重要！）
	/work		Tomcat把由JSP生成的Servlet文件，以及对其编译后生成的字节码文件存储在这里。

7. 手动编写第一个Web程序。
	(1) 在/Library/Tomcat/WebApps下创建新工程项目目录。
	(2) 在新工程目录下，编写index.jsp
	(3) 在新工程目录下，创建WEB-INF目录, 其中WEB-INF目录下还需要创建：web.xml即项目部署文件，classes文件夹，lib文件夹。
	(4) 测试运行。

8. WEB-INF目录详解。(重要！！！)
	(1) WEB-INF目录是Java的WEB应用的安全目录，所谓安全目录就是客户端无法访问，只有服务器端可以访问的目录。
	(2) 该目录下的web.xml是项目部署文件。比如部署: 项目的欢迎界面，可以通过在web.xml中添加并更改相应标签来完成。举例如下：

		<welcome-file-list>
        	<welcome-file>index.html</welcome-file>
        	<welcome-file>index.xhtml</welcome-file>
        	<welcome-file>index.htm</welcome-file>
        	<welcome-file>index.jsp</welcome-file>
    	</welcome-file-list>

	(3) 该目录下的classes文件夹，存放编译后的byte code文件即 *.class文件。
	(4) 该目录下的lib文件夹，存放工程需要的jar包。比如一些连接数据库的驱动jar包。

9. 注意！！！！！！WEB-INF中的项目部署文件web.xml每次修改后，都要重新启动Tomcat服务器！！！！！很容易忽略！！！！

10. 如何修改Tomcat服务器的默认端口号？
	Tomcat服务器的默认端口号为 8080. 但实际中，我们电脑中会安装很多应用服务器和数据库服务器，因此有可能造成端口冲突。
在Tomcat服务器的目录下，conf/server.xml文件中，我们可以设置为比如 8888来修改默认端口号。

    <Connector port="8080" protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="8443" />

11. 什么是JSP?

	JSP全称 Java Server Pages(Java服务器页面),其根本是一个简化的Servlet设计，它是在传统网页HTML文件中，插入Java程序段，从而形成JSP文件。
JSP是一种动态网页技术标准。JSP与Servlet一样，是在服务器端执行的。用JSP开发的Web应用是跨平台的。在JSP的生命周期中，会伴随着JSP转化到Servlet
的过程(由JSP引擎将JSP转化成Servlet即java类文件.java, 然后编译成字节码文件.class)


12. 常见的动态网站开发技术对比如下：
	
	JSP： 		Java平台，安全性高，适合开发大型企业级WEB应用程序。还有如今流行的分布式计算框架，Hadoop也是基于Java的。
	ASP.NET： 	.NET平台，简单易学，安全性以及跨平台性差。
	PHP：		简单高效，成本低开发周期短，特别适合中小型企业的WEB应用开发。(LAMP: Linus + Apache + MySQL + PHP)


13. JSP页面的组成部分包括： 静态内容(html)，指令，表达式，小脚本，声明，注释。


14. JSP的指令，常用的有3个。三大指令！！

	page指令			通常位于JSP页面的顶端，同一个页面可以有多个page指令。
	include指令		将一个外部文件嵌入到当前JSP文件中，同时解析这个页面中的JSP语句。
	taglib指令		使用标签库定义新的自定义标签，在JSP页面中启用定制行为。


	page指令语法： <%@ page 属性1 = "属性值" 属性2 = "属性值1, 属性值2" ... 属性n = "属性值n"%>

		<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>

	    	属性 				描述																	默认值
	    language		指定JSP页面使用的脚本语言														Java
	    import			通过该属性来引用脚本语言中使用到的类文件											无
	    contentType		指定JSP文件类型和页面的字符编码(指服务器发给客户端时的内容编码)					text/html, ISO-8859-1
		pageEncoding	是JSP文件本身的编码 (contentType更常用)

15. JSP的注释

		HTML的注释：		<!-- html注释 -->  这种注释，客户端可见，也即客户端view page source是可以看到的。
		JSP的注释： 		<%-- html注释 --%>  客户端不可见。
		JSP的脚本注释：	//  /* */          也即脚本中Java的注释，客户端不可见。 比如 <%       //           %>


16. JSP的脚本
	
	在JSP页面中执行的JAVA代码。把java代码写在JSP标签之间。语法： <% Java代码 %>
	比如：<% out.println("Hello World!"); %>, 其中out是一个JSP内置的用于浏览器输出的对象。


17. JSP的声明

	在JSP页面中定义变量或者方法。语法：<%!  Java代码   %>
	这里的Java代码是声明一些变量，或者定义方法，方便以后的JSP页面中的脚本去调用这些声明的变量或者定义的方法。


18. JSP的表达式

	在JSP页面中执行的表达式,表达式可以是之前定义的一些变量或者定义的方法。语法：   <%= 表达式 %>  
	注意：表达式不以分号结束！！！不要弄混了！！

	<%! 
		String name = "张小哈";
		int add(int x, int y){
			return x+y;
		}
	%>
	你好，<%= name %> <br/>
	x+y= <%= add(10,2) %>


19. JSP页面的生命周期 (重点！！！！！)

	用户向服务器发出请求index.jsp, 服务器判断是否是第一次请求。如果是第一次请求，Tomcat的JSP引擎把该JSP文件转换成为一个Servlet
(Servlet本质上也是一个java类), 然后经过编译生成字节码文件，并执行jspInit()方法。如果不是第一次请求，则直接找到编译生成的字节码文件，
解析执行 jspService(). 
	
	注意：由JSP引擎，将JSP文件转换成Servlet后，并编译生成的对应的字节码文件，存放在 /work目录下，上面笔记中有提到。
	注意：jspInit()方法，一共只会执行一次。

	jspService()方法被调用来处理客户端的请求。对每一个请求，JSP引擎创建一个新的线程来处理该请求。如果有多个客户端同时请求该JSP文件，则JSP
引擎会创建多个线程。每个客户端请求对应一个线程。以多线程方式执行，可以大大降低对系统的资源需求，提高系统的并发量及减少了响应时间。但也要注意多线程
的编程带来的同步问题，由于该Servlet始终在内存，所以响应是非常快的。

	注意：在转换成Servlet并编译后，产生的字节码文件和.java文件中，可以看到jspInit()方法和jspService()方法！！
	注意：每当JSP文件发生改变时，当客户发生请求时，JSP引擎就会重新将该JSP转化成Servlet,并编译生成新的字节码文件来解析执行。

20. JSP的内置对象是WEB容器创建的一组对象，不使用new关键字就可以创建使用的内置对象。比如：out就是一个内置对象。

	JSP有9大内置对象，其中常用的5个内置对象为：out, request, response, session, application; 剩下4个不常用的内置对象
为：page, pageContext, exception, config

	out
	out对象是jspWriter类的实例，是向客户输出内容常用的对象。常用方法如下：
	【1】void println(), 向客户端打印字符串，可以输出HTML标签，这样客户端浏览器收到响应时可以相应解析。
	【2】void clear(), 清除缓冲区的内容，如果在flush之后调用会抛出异常。
	【3】void clearBuffer(), 清除缓冲区内容，如果在flush之后调用不会抛出异常。
	【4】void flush(), 将缓冲区内容输出到客户端。
	【5】int getBufferSize(), 返回缓冲区以字节数的大小，如不设缓冲区则为0
	【6】int getRemaining(), 返回缓冲区还剩余多少可用。
	【7】boolean isAutoFlush(), 返回缓冲区满时，是自动清空还是抛出异常。
	【8】void close(), 关闭输出流。


	request
	客户端的请求信息被封装在request对象中，通过它才能了解到客户的需求，然后做出响应。它是HttpServletRequest类的实例。request对象具有请求
	域，即完成客户端的请求之前，该对象一直有效。常用方法如下：
	【1】String getParameter(String name), 表单中的<input>控件中,有一个属性是name, 这次传递的就是这个name属性的值。
	【2】String[] getParameterValues(String name), 同上但此时属性name会对应有多个属性value, 比如<input>控件类型为checkbox
	【3】void setAttribute(String, Object), 存储此请求中的属性。
	【4】Object getAttribute(String name), 返回指定属性的属性值。
	【5】String getContentType(), 得到请求体的MIME类型。
	【6】String getProtocol(), 返回请求用的协议类型及版本号。
	【7】String getServerName(), 返回接受请求的服务器主机名。

	注意：getParameter()等一些方法，不仅针对post方式表单提交信息封装与request对象中的信息获取，也可以对URL传递参数进行信息获取。

	注意：对应request对象中若包含中文信息，由于表单提交的信息默认编码为ISO-8859XX,因此我们要重新set编码方式，可以通过
	     request.setCharacterEncoding("utf-8");来解决中文乱码问题。但是无法解决URL传递中文参数出现的乱码问题,但其实也有解决办法，可以
	     通过配置server.xml文件来解决如下，加上一个属性 URIEncoding="utf-8"
	     <Connector port="8080" protocol="HTTP/1.1"
                    connectionTimeout="20000"
                    redirectPort="8443" URIEncoding="utf-8"/>


	ref: http://www.w3school.com.cn/tags/tag_input.asp
		 http://www.w3school.com.cn/tiy/t.asp?f=html_checkboxes


21. Web程序的请求响应模式：即用户发送HTTP请求(request), 服务器给用户响应(response).

	举例：比如一个用户的登录请求，点击登录即在向服务器发送请求，在请求对象中封装了用户名和密码。当服务器端接收到用户的请求后，判断用户名和密码后
，给客户端发送响应页面。

22. 什么是缓冲区？

	缓冲区又叫buffer, 是内存的一块儿区域用来保存临时数据。当我们调用 out.println()用于向客户端输出内容时，我们在客户端浏览器是可以看见这些
内容的，同时这些内容实际上也在内存上的缓冲区存着。

23. 表单常用的提交方式get与post区别

	<form name = "regForm" action = "动作" method = "提交方式">
	</form>

	get
	以明文的方式，通过URL提交数据，数据在URL中可以看到。提交的数据最多不超过2KB。安全性较低，但效率比post方式高。适合提交数据量不大，安全性不高的数据。比如：搜索、查询等功能。

	post
	将用户提交的信息封装在HTML HEADER内。适合提交数据量大，安全性高的用户信息。比如：注册、修改、上传等功能。因此，如何获得post方式提交的表单
	信息，就要通过其他的内置对象来完成了。







	


















